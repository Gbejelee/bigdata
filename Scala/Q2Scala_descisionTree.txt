import org.apache.spark.mllib.tree.DecisionTree
import org.apache.spark.mllib.tree.model.DecisionTreeModel
import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.mllib.tree.impurity.Gini
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.tree.configuration.Algo._
import org.apache.spark.mllib.linalg.Vectors


val data = sc.textFile("Homework3/glass.data")
val parsedData = data.map { line =>
  val parts = line.split(',').map(_.toDouble)
  LabeledPoint(parts(10), Vectors.dense(parts.dropRight(1)))
}
// Split data into training (60%) and test (40%).
val Array(training, test) = parsedData.randomSplit(Array(0.6, 0.4))

val numClasses = 8
val categoricalFeaturesInfo = Map[Int, Int]()
val maxDepth = 5
val maxBins = 32
val model = DecisionTree. trainClassifier(training,numClasses, categoricalFeaturesInfo, "gini", maxDepth,maxBins)

// Evaluate model on training examples and compute training error
val labelAndPreds = test.map { point =>
  val prediction = model.predict(point.features)
  (point.label, prediction)
}

val accuracy = labelAndPreds.filter(r => r._1 == r._2).count.toDouble / test.count

println("Accuracy for Decision Tree Algorithm is : " + (accuracy * 100)+ "%")
