import org.apache.spark.mllib.recommendation.MatrixFactorizationModel
import org.apache.spark.ml.recommendation.ALS
import org.apache.spark.ml.evaluation.RegressionEvaluator

// Load and parse the data
val data = sc.textFile("Homework3/ratings.dat")
case class Rating(userId: Int, itemId: Int, rating: Float)
val ratings = data.map(_.split("::") match { case Array(userId, itemId, rating, timestamp) => Rating(userId.toInt, itemId.toInt, rating.toFloat)}).toDF()

val Array(training, test) = ratings.randomSplit(Array(0.6, 0.4))

// Build the recommendation model using ALS on the training data
val als = new ALS()
 als.setMaxIter(10)
 als.setRegParam(0.01)
  als.setUserCol("userId")
  als.setItemCol("itemId")
  als.setRatingCol("rating")
val model = als.fit(training)

// Evaluate the model by computing the RMSE on the test data
val predictions = model.transform(test)

val prediction_filter_NaN = predictions.filter(!isnan($"prediction"))

val evaluator = new RegressionEvaluator()
  evaluator.setMetricName("rmse")
  evaluator.setLabelCol("rating")
  evaluator.setPredictionCol("prediction")
val rmse = evaluator.evaluate(prediction_filter_NaN)

